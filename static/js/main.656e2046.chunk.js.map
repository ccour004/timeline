{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Bar","props","state","low","high","console","log","chartistPluginThreshold","data","labels","this","items","map","item","summary","series","myNum","Math","random","setState","options","axisX","labelInterpolationFnc","value","index","plugins","threshold","type","React","Component","App","isSigned","access_token","url","CALENDAR_LIST","API_CALL","params","callback","fetch","headers","then","response","json","clientId","process","buttonText","onLogoutSuccess","clearInterval","interval","event","undefined","key","start","date","dateTime","scope","onSuccess","wc","setInterval","apiCall","onFailure","alert","cookiePolicy","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"yTAMMA,E,kDACJ,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAM,CAACC,KAAK,GAAGC,KAAK,IACzBC,QAAQC,IAAIC,KAHI,E,qDAKR,IAAD,OAEHC,EAAO,CACTC,OAAQC,KAAKT,MAAMU,MAAMC,KAAI,SAACC,GAAQ,OAAOA,EAAKC,WAClDC,OAAQ,CAACL,KAAKT,MAAMU,MAAMC,KAAI,WAAK,IAAII,EAAwB,IAAhBC,KAAKC,SAAiB,GAAoH,OAA7GF,EAAQ,EAAKd,MAAMC,KAAK,EAAKgB,SAAS,CAAChB,IAAIa,IAAYA,EAAQ,EAAKd,MAAME,MAAM,EAAKe,SAAS,CAACf,KAAKY,IAAgBA,OAG9LI,EAAU,CACZhB,KAAMM,KAAKR,MAAME,KACjBD,IAAKO,KAAKR,MAAMC,IAChBkB,MAAO,CACLC,sBAAuB,SAASC,EAAOC,GACrC,OAAOA,EAAQ,IAAM,EAAID,EAAQ,OAGrCE,QAAS,CACPlB,IAAwB,CACtBmB,UAAW,MAOjB,OACE,6BACE,kBAAC,IAAD,CAAelB,KAAMA,EAAMY,QAASA,EAASO,KAJtC,c,GA5BGC,IAAMC,WA0ETC,E,kDAnCb,WAAY7B,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CAAC6B,UAAS,EAAMC,aAAa,GAAGC,IAAI,0CAA0CC,cAAc,wBAAwBvB,MAAM,IAFvH,E,oDAKVwB,EAASC,EAAOC,GACtBC,MAAM5B,KAAKR,MAAM+B,IAAIE,EAAfzB,gDAAkE0B,EAAO,CAC3EG,QAAQ,CAAC,cAAgB,UAAU7B,KAAKR,MAAM8B,aAAa,OAAS,sBACrEQ,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UAAQF,MAAK,SAAAC,GAAWJ,EAASI,Q,+BAGrD,IAAD,OACN,OAAO/B,KAAKR,MAAM6B,SAAS,6BAAK,kBAAC,eAAD,CAC9BY,SAAUC,2EACVC,WAAW,SACXC,gBAAiB,kBAAI,EAAK3B,SAAS,CAACY,UAAS,EAAMC,aAAa,IAAIe,cAAc,EAAK7C,MAAM8C,cAC/F,kBAAC,EAAD,CAAKrC,MAAOD,KAAKR,MAAMS,QACtBD,KAAKR,MAAMS,MAAMC,KAAI,SAACqC,GACrB,YAAqBC,IAAlBD,EAAMnC,QAA+B,KACjC,yBAAKqC,IAAKF,EAAMnC,QAAQ,IAAIG,KAAKC,UAAjC,YAAqD+B,EAAMnC,QAA3D,WAA6EmC,EAAMG,MAAOH,EAAMG,MAAMC,KAAKJ,EAAMG,MAAMC,KAAKJ,EAAMG,MAAME,SAAU,QAG1J,kBAAC,cAAD,CACCX,SAAUC,2EACVC,WAAW,QACXU,MAAM,2CACNC,UAAW,SAACf,GAAY,EAAKtB,SAAS,CAACa,aAAaS,EAASgB,GAAGzB,aAAaD,UAAS,EAAKiB,SAASU,aAAY,kBAAI,EAAKC,QAAQ,2BAA2B,qCAAoC,SAAClB,GAC/L,EAAKtB,SAAS,CAACR,WAAyBuC,IAAnBT,EAAS9B,MAAoB8B,EAAS9B,MAAM,IAAIN,QAAQC,IAAI,2BAC9E,QACLsD,UAAW,kBAAIC,MAAM,kBACrBC,aAAc,2B,GA/BFlC,IAAMC,WChCJkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1E,QAAQ0E,MAAMA,EAAMC,c","file":"static/js/main.656e2046.chunk.js","sourcesContent":["import React from 'react';\nimport ChartistGraph from 'react-chartist';\nimport { GoogleLogout,GoogleLogin } from 'react-google-login';\nimport './App.css';\nimport chartistPluginThreshold from 'chartist-plugin-threshold';\n\nclass Bar extends React.Component {\n  constructor(props){\n    super(props);\n    this.state={low:-10,high:10}\n    console.log(chartistPluginThreshold)\n  }\n  render() {\n \n    var data = {\n      labels: this.props.items.map((item)=>{return item.summary}),\n      series: [this.props.items.map(()=>{let myNum = Math.random() * 100 - 50; if(myNum < this.state.low) this.setState({low:myNum}); if(myNum > this.state.high) this.setState({high:myNum}); return myNum})]\n    };\n \n    var options = {\n      high: this.state.high,\n      low: this.state.low,\n      axisX: {\n        labelInterpolationFnc: function(value, index) {\n          return index % 2 === 0 ? value : null;\n        }\n      },\n      plugins: [\n        chartistPluginThreshold({\n          threshold: 4\n        })\n      ]\n    };\n \n    var type = 'Line'\n \n    return (\n      <div>\n        <ChartistGraph data={data} options={options} type={type} />\n      </div>\n    )\n  }\n}\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {isSigned:false,access_token:'',url:'https://www.googleapis.com/calendar/v3/',CALENDAR_LIST:'users/me/calendarList',items:[]};\n  }\n\n  apiCall(API_CALL,params,callback){\n    fetch(this.state.url+API_CALL+\"?key=\"+process.env.REACT_APP_API_KEY+\"&\"+params,{\n        headers:{'Authorization':\"Bearer \"+this.state.access_token,'Accept':'application/json'}\n    }).then(response=>response.json()).then(response=>{callback(response)})\n  }\n\n  render(){\n    return this.state.isSigned?<div><GoogleLogout\n      clientId={process.env.REACT_APP_CLIENT_ID}\n      buttonText=\"Logout\"\n      onLogoutSuccess={()=>this.setState({isSigned:false,access_token:''},clearInterval(this.state.interval))}/>\n    <Bar items={this.state.items}/>\n    {this.state.items.map((event)=>{\n      if(event.summary === undefined) return (null)\n      return <div key={event.summary+\"_\"+Math.random()}>SUMMARY: {event.summary},START: {(event.start?(event.start.date?event.start.date:event.start.dateTime):\"\")}</div>\n    })}\n    </div>\n    :<GoogleLogin\n      clientId={process.env.REACT_APP_CLIENT_ID}\n      buttonText=\"Login\"\n      scope=\"https://www.googleapis.com/auth/calendar\"\n      onSuccess={(response)=>{this.setState({access_token:response.wc.access_token,isSigned:true,interval:setInterval(()=>this.apiCall('calendars/primary/events','timeMin=2020-02-02T10:00:00-07:00',(response)=>{\n        this.setState({items:response.items !== undefined?response.items:[]},console.log(\"Calendar updated!\"))\n        }),10000)})}}\n      onFailure={()=>alert(\"Login failed!\")}\n      cookiePolicy={'single_host_origin'}\n  />\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}