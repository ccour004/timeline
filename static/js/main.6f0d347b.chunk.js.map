{"version":3,"sources":["timeline_graph.js","App.js","useFetch.js","serviceWorker.js","index.js"],"names":["Graph","props","useState","low","setLow","high","setHigh","data","labels","items","map","item","summary","series","myNum","Math","random","options","axisX","labelInterpolationFnc","value","index","type","App","accessToken","setAccessToken","input","setData","error","setError","fetching","setFetching","useEffect","interval","setInterval","pause","fetch","query","then","response","json","catch","inError","timer","clearInterval","useFetch","URL","headers","clientId","process","buttonText","onLogoutSuccess","event","undefined","key","start","date","dateTime","scope","onSuccess","wc","access_token","onFailure","alert","cookiePolicy","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.6f0d347b.chunk.js","sourcesContent":["import React,{useState} from 'react';\nimport ChartistGraph from 'react-chartist';\n\nexport default function Graph(props){\n    const [low,setLow] = useState(-10);\n    const [high,setHigh] = useState(10);\n  \n    var data = {\n      labels: props.items.map((item)=>{return item.summary}),\n      series: [props.items.map(()=>{let myNum = Math.random() * 100 - 50; if(myNum < low) setLow(myNum); if(myNum > high) setHigh(myNum); return myNum})]\n    };\n   \n    var options = {\n      high: high,\n      low: low,\n      axisX: {\n        labelInterpolationFnc: function(value, index) {\n          return index % 2 === 0 ? value : null;\n        }\n      }\n    };\n   \n    var type = 'Line'\n    return (\n      <div>\n        <ChartistGraph data={data} options={options} type={type} />\n      </div>\n    ) \n}","import React,{useState} from 'react';\n\nimport { GoogleLogout,GoogleLogin } from 'react-google-login';\nimport useFetch from './useFetch.js'\nimport Graph from './timeline_graph.js'\nimport './App.css';\n\nexport default function App(){\n  const [accessToken,setAccessToken] = useState('');\n  const [calendar,] = useState('primary');\n  const URL = 'https://www.googleapis.com/calendar/v3/';\n  //const CALENDAR_LIST = 'users/me/calendarList';\n\n  const [data,fetching,] = useFetch({query:URL+\"calendars/\"+calendar+\"/events?key=\"+process.env.REACT_APP_API_KEY+\"&timeMin=2020-02-02T10:00:00-07:00\",\n                             pause: accessToken === '',\n                             options:{headers:{'Authorization':\"Bearer \"+accessToken,'Accept':'application/json'}}})\n\n  return accessToken !== ''?<div><GoogleLogout\n    clientId={process.env.REACT_APP_CLIENT_ID}\n    buttonText=\"Logout\"\n    onLogoutSuccess={()=>{setAccessToken('')}}/>\n  <Graph items={fetching?[]:data.items}/>\n  {(fetching?[]:data.items).map((event)=>{\n    if(event.summary === undefined) return (null)\n    return <div key={event.summary+\"_\"+Math.random()}>SUMMARY: {event.summary},START: {(event.start?(event.start.date?event.start.date:event.start.dateTime):\"\")}</div>\n  })}\n  </div>\n  :<GoogleLogin\n    clientId={process.env.REACT_APP_CLIENT_ID}\n    buttonText=\"Login\"\n    scope=\"https://www.googleapis.com/auth/calendar\"\n    onSuccess={(response)=>{setAccessToken(response.wc.access_token)}}\n    onFailure={()=>alert(\"Login failed!\")}\n    cookiePolicy={'single_host_origin'}\n  /> \n}","import {useState, useEffect} from 'react';\n\nexport default function useFetch(input){\n    const [data,setData] = useState(null);\n    const [error,setError] = useState(null);\n    const [fetching,setFetching] = useState(true);\n\n    useEffect(()=>{\n        const interval = setInterval(() => {\n        if(!input.pause || input.pause === false)\n          fetch(input.query,input.options?input.options:{})\n            .then(response=>response.json())\n            .then(response=>{\n                setData(response);\n                setFetching(false);\n            })\n            .catch(inError => setError(inError))\n        }, input.timer?input.timer:10000);\n        return () => clearInterval(interval);\n      },[input.query,input.options,input.timer,input.pause]);\n    \n    return [data, fetching, error]\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}